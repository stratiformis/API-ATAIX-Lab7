import json
import requests
import time

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
API_KEY = ""
API_BASE_URL = "https://api.ataix.kz/api/orders"
ORDERS_FILE = "orders_data.json"


# === –†–∞–±–æ—Ç–∞ —Å JSON-—Ñ–∞–π–ª–æ–º ===
def load_orders():
    with open(ORDERS_FILE, "r") as f:
        return json.load(f)


def save_orders(order_list):
    with open(ORDERS_FILE, "w") as f:
        json.dump(order_list, f, indent=4)


# === –†–∞–±–æ—Ç–∞ —Å API ===
def get_order_status(order_id):
    url = f"{API_BASE_URL}/{order_id}"
    headers = {
        "accept": "application/json",
        "X-API-Key": API_KEY
    }
    response = requests.get(url, headers=headers, timeout=20)

    if response.status_code == 200:
        return response.json().get("result", {}).get("status")

    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ {order_id}: {response.status_code}")
    return None


def create_new_order(symbol, price):
    new_price = round(float(price) * 1.02, 4)  # 2% –¥–æ—Ä–æ–∂–µ –æ—Ç –∫—É–ø–ª–µ–Ω–Ω–æ–π —Ü–µ–Ω—ã

    data = {
        "symbol": symbol,
        "side": "sell",
        "type": "limit",
        "quantity": 1,
        "price": str(new_price)
    }
    headers = {
        "accept": "application/json",
        "X-API-Key": API_KEY,
        "Content-Type": "application/json"
    }
    response = requests.post(API_BASE_URL, headers=headers, json=data, timeout=20)

    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    print(f"–û—Ç–≤–µ—Ç –æ—Ç API –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: {response.status_code} {response.text}")

    if response.status_code == 200:
        return response.json().get("result")

    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: {response.status_code}")
    return None


# === –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å ===
def process_orders():
    orders = load_orders()
    new_orders = []

    for order in orders:
        order_id = order.get("orderID")
        print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ä–¥–µ—Ä–∞ {order_id}...")

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞
        status = get_order_status(order_id)

        # –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω, —Å–æ–∑–¥–∞–µ–º –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
        if status == "filled":
            print(f"‚úÖ –û—Ä–¥–µ—Ä {order_id} –≤—ã–ø–æ–ª–Ω–µ–Ω. –°–æ–∑–¥–∞—ë–º –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É.")
            new_order = create_new_order(order["symbol"], order["price"])

            if new_order:
                print(f"‚ûï –ù–æ–≤—ã–π –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É —Å–æ–∑–¥–∞–Ω: {new_order['orderID']} –ø–æ —Ü–µ–Ω–µ {new_order['price']}")
                new_orders.append({
                    "orderID": new_order["orderID"],
                    "price": new_order["price"],
                    "quantity": new_order["quantity"],
                    "symbol": new_order["symbol"],
                    "created": new_order["created"],
                    "status": new_order["status"]
                })
        else:
            print(f"‚ö†Ô∏è –û—Ä–¥–µ—Ä {order_id} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –°—Ç–∞—Ç—É—Å: {status}")

        time.sleep(1)

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    orders.extend(new_orders)
    save_orders(orders)
    print("\nüìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –§–∞–π–ª orders_data.json –æ–±–Ω–æ–≤–ª—ë–Ω.")


# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    process_orders()
